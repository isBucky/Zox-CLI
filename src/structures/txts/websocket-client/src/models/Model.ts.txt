'use strict';

import sequelize, { Sequelize } from 'sequelize';
import { resolve } from 'node:path';
import { readdir } from 'node:fs';

/**
 * Class responsible for managing the models.
 * @class ModelManager
 */
class ModelManager {
  /**
   * Function responsible for loading all models.
   * @param {Sequelize} [db] Function reserved for the database.
   * @returns {Promise<object>}
   */
  public static loadModels(db: Sequelize): Promise<boolean> {
    return new Promise((res, rej) =>
      /* Reading directories from current folder. */
      readdir(resolve(__dirname), (err, dirs) => {
        dirs = dirs.filter(i => !i.endsWith('.js'));
        if (err) return rej(err);
        if (!dirs.length) return res(true);
        
        /* Searching for files within the directory. */
        dirs.forEach((dir, index, arr) =>
          readdir(resolve(__dirname, dir), (err, files) => {
            if (err) return rej(err);
            if (!files.length && (index + 1) !== arr.length) return;
            if (!files.length && (index + 1) == arr.length) return res(true);
            
            /* Checking if it's a file and running. */
            files.filter(i => i.endsWith('.js')).forEach(async(file, index2, arr2) => {
              try {
                let data = (await import(`./${dir}/${file}`)).default;
                (data(sequelize.Model, sequelize.DataTypes)).init(db);
                if ((index + 1) == arr.length && (index2 + 1) == arr2.length) return res(true);
              } catch(err) { rej(err); }
            });
          })
        );
      })
    );
  }
  
  /**
   * This function does the part of associating one model with another.
   * @param {Sequelize} [db] Function reserved for the database.
   * @returns {Promise<boolean>}
   */
  static loadModelsAssociate(db: Sequelize): Promise<boolean> {
    return new Promise((res, rej) => {
      let models = Object.entries(db.models ?? {});
        models = models.filter(i => i[1]?.associate);
        
      if (!models.length) return res(true);
      models.forEach((v, i, arr) => {
        v[1].associate(db.models);
        if ((i + 1) == arr.length) return res(true);
      });
   });
  }
}

export default ModelManager;