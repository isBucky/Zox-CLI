'use strict';

import { readdirSync } from 'node:fs';
import { resolve } from 'node:path';
import Websocket from 'ws';

/**
 * Class that manages the websocket client.
 * @class WebsocketManager
 * @extends {Websocket}
 */
class WebsocketManager extends Websocket {
  public handlers: object;
  
  /**
   * @param {string} [url] Websocket server url.
   * @param {object} [options] Websocket client configuration options.
   */
  constructor(url: string, options: object) {
    super(url, options);
    /**
     * Variable containing all the handlers of requests made via websocket.
     * @type {object}
     */
    this.handlers = this.#resolveHandlers();
    this.on('message', this.#message);
  }
  
  /**
   * Function whose functionality is to manage all messages received via websocket.
   * 
   * @param {any} [message] Message received via websocket.
   * @param {boolean} [isBinary] Value identifying whether the value is binary or not.
   * 
   * @private
   * @returns {void}
   */
  private #message(message: any, isBinary: boolean): void {
    if (Array.isArray(message)) message = Buffer.concat(message);
    else if (message instanceof ArrayBuffer) message = Buffer.from(message);
    
    message = JSON.parse(message);
    if (!('op' in message) || !(message.op.toLowerCase() in this.handlers)) return;
    this.handlers[message.op.toLowerCase()](this, message);
  }
  
  /**
   * This function is the part of loading all the handlers of requests made via websocket.
   * 
   * @private
   * @returns {object}
   */
  private async #resolveHandlers(): object {
    let handlers = {};
    for (let file of readdirSync(resolve(__dirname, 'handlers'))) {
      if (!file.endsWith('.js')) continue;
      let handler = (await import(`./handlers/${file}`)).default;
      handlers[file.split('.')[0].toLowerCase()] = handler;
    }
    
    return handlers;
  }
  
  /**
    * Function used to send information to a websocket client.
    * @returns {Promise<boolean>}
    * 
    * @example
    * ```js
    * client._send('ready', 'Welcome to the websocket server!');
    * ```
    */
  public _send(op, data): Promise<boolean> {
    return new Promise((res, rej) => {
      this.send(JSON.stringify({ op, data }), null, (error) => {
        if (error) return rej(error);
        return res(true);
      });
    });
  }
}

export default WebsocketManager;