'use strict';

import WebsocketManager from './websocket/Websocket.js';
import rateLimit from 'express-rate-limit';
import express, { Request, Response } from 'express';

import { createServer } from 'node:http';
import helmet from 'helmet';
import logger from 'morgan';
import cors from 'cors';

import { Sequelize } from 'sequelize';

/**
 * Class responsible for managing the server.
 * @class Server
 */
class Server {
  public app: object;
  public server: object;
  public websocket: WebsocketManager;
  public port: number;
  public cache: Map;
  
  /**
   * @param {Sequelize} [db] MySQL database using sequelize.
   */
  constructor(db: Sequelize) {
    /**
     * Variable containing information about the express server.
     * @type {object}
     */
    this.app = express();
    /**
     * Variable containing information about the http server.
     * @type {object}
     */
    this.server = createServer(this.app);
    /**
     * Variable containing the websocket server settings.
     * @type {object}
      */
    this.websocket = new WebsocketManager(this.server);
    /**
     * Port on which the server will be launched.
     * @type {number}
     */
    this.port = process.env.PORT ?? 3e3;
    /**
     * A simple cache to store some temporary information.
     * @type {Map}
     */
    this.cache = new Map();
    
    this.app
      /* Loading the middlewares to configure our server. */
      .use(logger('common')).use(express.json())
      .use(express.urlencoded({ extended: true }))
      .use(cors()).use(helmet())
      .use(this.sqlInjection())
      
      /* Setting the request rate on the server. */
      .use(rateLimit({
        windowMs: 1e3 * 60 * 15, // 15 minutes
        standardHeaders: true,
        legacyHeaders: false,
        max: 50
      }))
      
      /* Here is where the routes will be configured. */
      .get('/', (req, res) => res.status(200).end());
  }
  
  /**
   * This is a function to configure server middleware.
   * It will basically handle the current URL, and check if it contains invalid characters.
   */
  public sqlInjection(): function {
    // List of invalid characters:
    let isSqlInjection: boolean = (str) => !!([
        new RegExp('w*((%27)|(\'))((%6F)|o|(%4F))((%72)|r|(%52))', 'i'),
        new RegExp('((%3D)|(=))[^\n]*((%27)|(\')|(--)|(%3B)|(;))', 'i'),
        new RegExp('(%27)|(\')|(--)|(%23)|(#)', 'i'),
        new RegExp('(%27)|(\')|(--)|(%22)|(\")', 'i'),
        new RegExp('(%27)|(\')|(--)|(%60)|(\`)', 'i'),
        new RegExp('((%27)|(\'))union', 'i')
      ].map(i => i.test(str)).filter(Boolean).length);
      
    // Middleware configuration function:
    return ((req: Request, res: Response, next: function): any => {
      if (isSqlInjection(req.url)) return res.status(403).end();
      return next();
    });
  }
  
  /**
   * Function to start the web server.
   * @returns {void}
   */
  public start(): void {
    return this.server.listen(this.port, () =>
      console.log('Server is listening on port:', this.port));
  }
}

export default Server;